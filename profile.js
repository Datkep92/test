
// Th√™m ·ªü ƒë·∫ßu file
document.addEventListener('DOMContentLoaded', function() {
  if (document.getElementById('profile')) {
    initProfile();
  }
});

function loadPayrollDetails(employeeId) {
  const emp = globalEmployeeData.find(e => e.id === employeeId);
  if (!emp) return;

  const now = new Date();
  const month = now.getMonth();
  const year = now.getFullYear();
  const monthKey = `${year}-${month + 1 < 10 ? '0' + (month + 1) : (month + 1)}`;

  // L·ªçc l·ªãch l√†m vi·ªác c·ªßa nh√¢n vi√™n trong th√°ng
  const schedules = globalScheduleData.filter(s => {
    const d = new Date(s.date);
    return (
      s.employeeId === employeeId &&
      d.getMonth() === month &&
      d.getFullYear() === year &&
      s.approvalStatus === 'approved'
    );
  });

  const daysOff = schedules.filter(s => s.status === 'off').length;
  const daysOT = schedules.filter(s => s.status === 'overtime').length;
  const workingDays = new Date(year, month + 1, 0).getDate() - daysOff + daysOT;

  Promise.all([
    firebase.database().ref(`employeeSettings/${employeeId}`).once('value'),
    firebase.database().ref(`payrolls/${employeeId}/${monthKey}`).once('value')
  ]).then(([settingSnap, payrollSnap]) => {
    const settings = settingSnap.val() || {};
    const payroll = payrollSnap.val() || {};

    const wage = settings.wagePerHour || 20000;
    const hours = settings.hoursPerDay || 8;
    const bonus = payroll.bonus || 0;
    const penalty = payroll.penalty || 0;
    const bonusNote = payroll.bonusNote || '';
    const penaltyNote = payroll.penaltyNote || '';

    const salary = wage * hours * workingDays + bonus - penalty;

    const container = document.getElementById("payroll-details-container");
    if (!container) return;

    container.innerHTML = `
      <table class="table-style">
        <tr><td><strong>Th√°ng</strong></td><td>${month + 1}/${year}</td></tr>
        <tr><td><strong>H·ªç t√™n</strong></td><td>${emp.name}</td></tr>
        <tr><td><strong>Ng√†y c√¥ng</strong></td><td>${workingDays}</td></tr>
        <tr><td><strong>Ng√†y ngh·ªâ</strong></td><td>${daysOff}</td></tr>
        <tr><td><strong>Ng√†y tƒÉng ca</strong></td><td>${daysOT}</td></tr>
        <tr><td><strong>Ch·∫ø t√†i</strong></td><td>${penalty.toLocaleString()} VND<br><em>${penaltyNote}</em></td></tr>
        <tr><td><strong>Th∆∞·ªüng</strong></td><td>${bonus.toLocaleString()} VND<br><em>${bonusNote}</em></td></tr>
        <tr><td><strong>T·ªïng l∆∞∆°ng th·ª±c l√£nh</strong></td><td><strong style="color: green;">${salary.toLocaleString()} VND</strong></td></tr>
      </table>
    `;
  }).catch(err => {
    console.error("L·ªói khi load b·∫£ng l∆∞∆°ng:", err);
  });
}

function prepareSwapRequest(date) {
  const modal = document.getElementById("action-modal");
  const content = document.getElementById("action-modal-content");
  if (!modal || !content) return;

  const employees = globalEmployeeData.filter(e => e.id !== currentEmployeeId && e.active);
  if (!employees.length) {
    alert("Kh√¥ng c√≥ nh√¢n vi√™n n√†o ƒë·ªÉ ƒë·ªïi ca!");
    return;
  }

  const selectHTML = `
    <h3>Ch·ªçn nh√¢n vi√™n ƒë·ªÉ ƒë·ªïi ca ng√†y ${date}</h3>
    <select id="swap-employee">
      ${employees.map(e => `<option value="${e.id}">${e.name}</option>`).join("")}
    </select>
    <div class="button-group">
      <button onclick="submitScheduleRequest('${date}', 'swap', document.getElementById('swap-employee').value)">X√°c nh·∫≠n</button>
      <button onclick="closeModal('action-modal')">H·ªßy</button>
    </div>
  `;

  content.innerHTML = selectHTML;
  modal.style.display = "block";
}
function initProfile() {
  // ƒê·∫£m b·∫£o c√°c bi·∫øn ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
  currentMonth = new Date().getMonth() + 1;
  currentYear = new Date().getFullYear();
  
  loadFirebaseData(() => {
    setupRealtimeListeners();
    renderCalendar();
    renderScheduleRequests();
    renderNotifications();
    renderAdvanceRequests();
    renderOffAndOvertime();
    renderSalarySummary();
  });
}

// S·ª≠a h√†m renderCalendar ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªÉn th·ªã ngay c·∫£ khi kh√¥ng c√≥ d·ªØ li·ªáu
function renderCalendar() {
  const calendar = document.getElementById('calendar');
  if (!calendar) {
    console.error("Calendar element not found");
    return;
  }

  const daysInMonth = new Date(currentYear, currentMonth, 0).getDate();
  const firstDay = new Date(currentYear, currentMonth - 1, 1).getDay() || 7;

  let calendarHTML = `
    <div class="calendar-header">
      <button onclick="changeMonth(-1)">‚ùÆ</button>
      <h3>Th√°ng ${currentMonth}/${currentYear}</h3>
      <button onclick="changeMonth(1)">‚ùØ</button>
    </div>
    <div class="calendar">
      <div class="calendar-header">CN</div>
      <div class="calendar-header">T2</div>
      <div class="calendar-header">T3</div>
      <div class="calendar-header">T4</div>
      <div class="calendar-header">T5</div>
      <div class="calendar-header">T6</div>
      <div class="calendar-header">T7</div>`;

  // Th√™m c√°c ng√†y tr·ªëng ƒë·∫ßu th√°ng
  for (let i = 1; i < firstDay; i++) {
    calendarHTML += `<div class="day empty"></div>`;
  }

  // Th√™m c√°c ng√†y trong th√°ng
  for (let day = 1; day <= daysInMonth; day++) {
    const dateStr = `${currentYear}-${String(currentMonth).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
    const schedulesToday = globalScheduleData.filter(s => s.date === dateStr && s.approvalStatus === 'approved');

    const avatarsHTML = schedulesToday.map(s => {
      const initial = s.employeeName?.charAt(0)?.toUpperCase() || "?";
      const bgColor = scheduleStatusColors[s.status] || "#999";
      const statusText = getScheduleTypeText(s);
      return `
        <div class="mini-avatar"
             title="${s.employeeName} - ${statusText}"
             style="background-color: ${bgColor};">
          ${initial}
        </div>`;
    }).join("");

    calendarHTML += `
      <div class="day" onclick="showActionModal('${dateStr}')">
        <div class="day-number">${day}</div>
        <div class="mini-avatar-group">
          ${avatarsHTML}
        </div>
      </div>`;
  }

  calendarHTML += `</div>`;
  calendar.innerHTML = calendarHTML;
}
//
// File: js/profile.js
let currentMonth = new Date().getMonth() + 1;
let currentYear = new Date().getFullYear();
let currentScheduleMonth = new Date().getMonth() + 1;
let currentScheduleYear = new Date().getFullYear();






function renderProfile() {
  renderCalendar();
  renderScheduleRequests();
  renderNotifications();
  renderAdvanceRequests();
  renderOffAndOvertime();
  renderSalarySummary();
}





// ================ SCHEDULE FUNCTIONS ================
function showActionModal(date, schedule = null, targetEmployeeId = null) {
  const modal = document.getElementById("action-modal");
  const content = document.getElementById("action-modal-content");
  if (!modal || !content) return;

  const viewingEmployeeId = targetEmployeeId || currentEmployeeId;
  const allSchedulesForDate = globalScheduleData.filter(s => s.date === date);
  const currentUser = globalEmployeeData.find(e => e.id === currentEmployeeId);

  let contentHTML = `<h3>Chi ti·∫øt l·ªãch ng√†y ${date}</h3>`;

  if (allSchedulesForDate.length === 0) {
    contentHTML += `<p>Ch∆∞a c√≥ l·ªãch l√†m vi·ªác n√†o trong ng√†y n√†y.</p>`;
  } else {
    contentHTML += `<ul>`;
    allSchedulesForDate.forEach(s => {
      const statusText = getScheduleTypeText(s);
      const approvalText = s.approvalStatus === 'approved'
        ? '‚úÖ ƒê√£ duy·ªát'
        : s.approvalStatus === 'rejected'
          ? '‚ùå B·ªã t·ª´ ch·ªëi'
          : '‚è≥ Ch·ªù duy·ªát' + (s.cancelRequested ? ' (Y√™u c·∫ßu h·ªßy)' : '');

      contentHTML += `<li>
        <strong>${s.employeeName}</strong>: ${statusText} (${approvalText})`;

      // N·∫øu l√† qu·∫£n l√Ω & xem l·ªãch ng∆∞·ªùi kh√°c & l·ªãch ƒëang ch·ªù duy·ªát
      if (
        isCurrentUserManager() &&
        s.employeeId !== currentEmployeeId &&
        (s.approvalStatus === 'pending' || s.approvalStatus === 'swapPending')
      ) {
        if (s.cancelRequested) {
          contentHTML += `
            <div class="button-group" style="margin-top: 4px;">
              <button onclick="approveCancelSchedule('${s.id}')" class="primary-btn">‚úîÔ∏è Duy·ªát h·ªßy</button>
              <button onclick="rejectCancelSchedule('${s.id}')" class="secondary-btn">‚ùå  h·ªßy</button>
            </div>`;
        } else {
          contentHTML += `
            <div class="button-group" style="margin-top: 4px;">
              <button onclick="approveSchedule('${s.id}')" class="primary-btn">‚úîÔ∏è Duy·ªát</button>
              <button onclick="rejectSchedule('${s.id}')" class="secondary-btn">‚ùå </button>
            </div>`;
        }
      }
      // N·∫øu l√† y√™u c·∫ßu c·ªßa ch√≠nh nh√¢n vi√™n hi·ªán t·∫°i
      else if (
        s.employeeId === currentEmployeeId &&
        (s.approvalStatus === 'pending' || s.approvalStatus === 'swapPending' || s.approvalStatus === 'approved')
      ) {
        contentHTML += `
          <div class="button-group" style="margin-top: 4px;">
            <button onclick="cancelSchedule('${s.id}')" class="secondary-btn">H·ªßy y√™u c·∫ßu</button>
          </div>`;
      }

      contentHTML += `</li>`;
    });
    contentHTML += `</ul>`;
  }

  // N·∫øu l√† ch√≠nh m√¨nh ‚Üí hi·ªÉn th·ªã form g·ª≠i y√™u c·∫ßu
  if (viewingEmployeeId === currentEmployeeId) {
    contentHTML += `
      <div class="schedule-actions">
        <p>B·∫°n mu·ªën g·ª≠i y√™u c·∫ßu cho ng√†y n√†y:</p>
        <button onclick="submitScheduleRequest('${date}', 'off')">üõå Xin ngh·ªâ</button>
        <button onclick="submitScheduleRequest('${date}', 'overtime')">üïí TƒÉng ca</button>
        <button onclick="prepareSwapRequest('${date}')">üîÅ ƒê·ªïi ca</button>
      </div>
    `;
  }

  // ‚úÖ N·∫øu l√† qu·∫£n l√Ω ‚Üí hi·ªÉn th·ªã form x·∫øp l·ªãch tr·ª±c ti·∫øp
  if (isCurrentUserManager()) {
    const activeEmployees = globalEmployeeData.filter(e => e.active);
    contentHTML += `
      <hr>
      <div class="schedule-actions">
        <p><strong>Qu·∫£n l√Ω:</strong> X·∫øp l·ªãch tr·ª±c ti·∫øp cho nh√¢n vi√™n:</p>
        <select id="assign-employee-id">
          ${activeEmployees.map(e => `<option value="${e.id}">${e.name}</option>`).join("")}
        </select>
        <div class="button-group" style="margin-top: 6px;">
          <button onclick="assignSchedule('${date}', 'off')" class="small-btn">üõå Ngh·ªâ</button>
          <button onclick="assignSchedule('${date}', 'overtime')" class="small-btn">üïí TƒÉng ca</button>
          <button onclick="assignSchedule('${date}', 'swap')" class="small-btn">üîÅ ƒê·ªïi ca</button>
        </div>
      </div>
    `;
  }

  // N√∫t ƒë√≥ng
  contentHTML += `
    <div class="button-group" style="margin-top: 12px;">
      <button onclick="closeModal('action-modal')" class="secondary-btn">ƒê√≥ng</button>
    </div>
  `;

  content.innerHTML = contentHTML;
  modal.style.display = "block";
}

function approveCancelSchedule(scheduleId) {
  if (!isCurrentUserManager()) {
    showToastNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn ph√™ duy·ªát!');
    return;
  }
  const schedule = globalScheduleData.find(s => s.id === scheduleId);
  if (!schedule || !schedule.cancelRequested) {
    showToastNotification('Y√™u c·∫ßu h·ªßy kh√¥ng t·ªìn t·∫°i!');
    return;
  }

  const updates = {};
  updates[`schedules/${scheduleId}`] = null;

  // Th√¥ng b√°o cho nh√¢n vi√™n
  const statusText = schedule.status === 'off' ? 'ngh·ªâ' : schedule.status === 'overtime' ? 'tƒÉng ca' : 'ƒë·ªïi ca';
  updates[`notifications/${schedule.employeeId}/notif_${Date.now()}`] = {
    message: `Y√™u c·∫ßu h·ªßy ${statusText} ng√†y ${schedule.date} ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát`,
    timestamp: Date.now(),
    type: 'cancel_approval',
    isRead: false
  };

  db.ref().update(updates)
    .then(() => {
      showToastNotification('ƒê√£ ph√™ duy·ªát h·ªßy y√™u c·∫ßu!');
      closeModal('action-modal');
      renderScheduleRequests();
      renderCalendar();
    })
    .catch(err => {
      showToastNotification(`L·ªói: ${err.message}`);
      console.error('‚ùå Error approving cancel:', err);
    });
}

function rejectCancelSchedule(scheduleId) {
  if (!isCurrentUserManager()) {
    showToastNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi!');
    return;
  }
  const schedule = globalScheduleData.find(s => s.id === scheduleId);
  if (!schedule || !schedule.cancelRequested) {
    showToastNotification('Y√™u c·∫ßu h·ªßy kh√¥ng t·ªìn t·∫°i!');
    return;
  }

  const reason = prompt('L√Ω do t·ª´ ch·ªëi h·ªßy:');
  if (!reason) return;

  const updates = {};
  updates[`schedules/${scheduleId}/cancelRequested`] = null;
  updates[`schedules/${scheduleId}/cancelRequestedAt`] = null;

  // Th√¥ng b√°o cho nh√¢n vi√™n
  const statusText = schedule.status === 'off' ? 'ngh·ªâ' : schedule.status === 'overtime' ? 'tƒÉng ca' : 'ƒë·ªïi ca';
  updates[`notifications/${schedule.employeeId}/notif_${Date.now()}`] = {
    message: `Y√™u c·∫ßu h·ªßy ${statusText} ng√†y ${schedule.date} b·ªã t·ª´ ch·ªëi: ${reason}`,
    timestamp: Date.now(),
    type: 'cancel_rejection',
    isRead: false
  };

  db.ref().update(updates)
    .then(() => {
      showToastNotification('ƒê√£ t·ª´ ch·ªëi h·ªßy y√™u c·∫ßu!');
      closeModal('action-modal');
      renderScheduleRequests();
      renderCalendar();
    })
    .catch(err => {
      showToastNotification(`L·ªói: ${err.message}`);
      console.error('‚ùå Error rejecting cancel:', err);
    });
}

function approveSchedule(scheduleId) {
  if (!isCurrentUserManager()) {
    showToastNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn ph√™ duy·ªát!');
    return;
  }
  const schedule = globalScheduleData.find(s => s.id === scheduleId);
  if (!schedule) {
    showToastNotification('Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!');
    return;
  }
  db.ref(`schedules/${scheduleId}`).update({ approvalStatus: 'approved' })
    .then(() => {
      db.ref(`notifications/${schedule.employeeId}`).push({
        message: `Y√™u c·∫ßu ${schedule.status} ng√†y ${schedule.date} ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát`,
        timestamp: Date.now(),
        read: false
      });
      showToastNotification('ƒê√£ ph√™ duy·ªát y√™u c·∫ßu!');
      closeModal('action-modal'); // T·ª± ƒë·ªông ƒë√≥ng popup
      renderScheduleRequests(); // C·∫≠p nh·∫≠t danh s√°ch tr·∫°ng th√°i
      renderCalendar(); // C·∫≠p nh·∫≠t l·ªãch
    })
    .catch(err => {
      showToastNotification(`L·ªói: ${err.message}`);
      console.error('‚ùå Error approving schedule:', err);
    });
}
// ====== Hi·ªÉn th·ªã danh s√°ch nh√¢n vi√™n cho qu·∫£n l√Ω ======
function renderEmployeeList() {
  const container = document.getElementById("employee-list-container");
  if (!container) return;

  const currentUser = auth.currentUser;
  if (!currentUser || !globalEmployeeData.length) return;

  const currentEmployee = globalEmployeeData.find(e => e.id === currentUser.uid);
  if (!currentEmployee) return;

  let rows = "";

  if (currentEmployee.role === "manager" || currentEmployee.role === "admin") {
    // ‚úÖ Qu·∫£n l√Ω xem to√†n b·ªô
    rows = globalEmployeeData.map(emp => `
      <tr onclick="showPayrollModal('${emp.id}')">
        <td>${emp.name}</td>
        <td>${emp.phone || "Kh√¥ng r√µ"}</td>
        <td>${emp.address}</td>
      </tr>
    `).join("");
  } else {
    // ‚úÖ Nh√¢n vi√™n ch·ªâ xem ch√≠nh m√¨nh
    rows = `
      <tr onclick="showPayrollModal('${currentEmployee.id}')">
        <td>${currentEmployee.name}</td>
        <td>${currentEmployee.phone || "Kh√¥ng r√µ"}</td>
        <td>${currentEmployee.address}</td>
      </tr>
    `;
  }

  container.innerHTML = `
    <table class="table-style">
      <thead>
        <tr>
          <th>T√™n</th>
          <th>SƒêT</th>
          <th>ƒê·ªãa ch·ªâ</th>
        </tr>
      </thead>
      <tbody>${rows}</tbody>
    </table>
  `;
}

function updateUserProfile() {
  const nameInput = document.getElementById('name-input');
  const phoneInput = document.getElementById('phone-input');
  const addressInput = document.getElementById('address-input');
  const noteInput = document.getElementById('note-input');

  if (!nameInput || !phoneInput || !addressInput) {
    showToastNotification('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
    return;
  }

  const updatedData = {
    name: nameInput.value.trim() || "Ch∆∞a r√µ t√™n",
    sdt: phoneInput.value.trim() || "",
    address: addressInput.value.trim() || ""
  };
  if (noteInput) updatedData.note = noteInput.value.trim() || "";

  db.ref(`users/${currentEmployeeId}`).update(updatedData)
    .then(() => {
      showToastNotification('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
      const userIndex = globalEmployeeData.findIndex(e => e.id === currentEmployeeId);
      if (userIndex !== -1) {
        globalEmployeeData[userIndex] = { ...globalEmployeeData[userIndex], ...updatedData };
      }
    })
    .catch(err => {
      showToastNotification('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin!');
      console.error("‚ùå Error updating profile:", err.message);
    });
}
function rejectSchedule(scheduleId) {
  if (!isCurrentUserManager()) {
    showToastNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi!');
    return;
  }
  const schedule = globalScheduleData.find(s => s.id === scheduleId);
  if (!schedule) {
    showToastNotification('Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!');
    return;
  }
  const reason = prompt('L√Ω do t·ª´ ch·ªëi:');
  if (!reason) return;
  db.ref(`schedules/${scheduleId}`).update({ approvalStatus: 'rejected', rejectReason: reason })
    .then(() => {
      db.ref(`notifications/${schedule.employeeId}`).push({
        message: `Y√™u c·∫ßu ${schedule.status} ng√†y ${schedule.date} b·ªã t·ª´ ch·ªëi: ${reason}`,
        timestamp: Date.now(),
        read: false
      });
      showToastNotification('ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu!');
      closeModal('action-modal'); // T·ª± ƒë·ªông ƒë√≥ng popup
      renderScheduleRequests(); // C·∫≠p nh·∫≠t danh s√°ch tr·∫°ng th√°i
      renderCalendar(); // C·∫≠p nh·∫≠t l·ªãch
    })
    .catch(err => {
      showToastNotification(`L·ªói: ${err.message}`);
      console.error('‚ùå Error rejecting schedule:', err);
    });
}
function renderScheduleRequests() {
  const container = document.getElementById("schedule-requests-container");
  if (!container) return;

  const isManager = isCurrentUserManager();
  const expanded = container.dataset.expanded === "true";

  let requests = isManager
    ? globalScheduleData
    : globalScheduleData.filter(s => s.employeeId === currentEmployeeId);

  // ‚úÖ Nh√≥m y√™u c·∫ßu
  const pendingRequests = requests.filter(s =>
    s.approvalStatus === "pending" ||
    s.approvalStatus === "swapPending" ||
    s.cancelRequested
  ).sort((a, b) => new Date(b.date) - new Date(a.date));

  const processedRequests = requests.filter(s =>
    s.approvalStatus === "approved" ||
    s.approvalStatus === "rejected"
  ).sort((a, b) => new Date(b.date) - new Date(a.date));

  const sortedRequests = [...pendingRequests, ...processedRequests];

  const displayRequests = expanded ? sortedRequests : sortedRequests.slice(0, 3);

  container.innerHTML = `
    <div style="display:flex; justify-content:space-between; align-items:center;">
      <h3>Y√™u C·∫ßu L·ªãch L√†m Vi·ªác</h3>
      ${sortedRequests.length > 3 ? `
        <button class="small-btn" onclick="toggleRequestList()">
          ${expanded ? "Thu g·ªçn" : "Xem th√™m"}
        </button>
      ` : ""}
    </div>
    ${displayRequests.length > 0 ? `
      <table class="schedule-requests-table">
        <thead>
          <tr>
            <th>Ng√†y</th>
            <th>Nh√¢n vi√™n</th>
            <th>Lo·∫°i</th>
            <th>Tr·∫°ng th√°i</th>
          </tr>
        </thead>
        <tbody>
          ${displayRequests.map(s => {
            const date = new Date(s.date).toLocaleDateString("vi-VN");
            const name = s.employeeName || "Kh√¥ng x√°c ƒë·ªãnh";
            const typeText = getScheduleTypeText(s);

            // ‚úÖ Badge tr·∫°ng th√°i v·ªõi click
            let statusCell = "";
            if (s.approvalStatus === "pending" || s.approvalStatus === "swapPending") {
              if (isManager) {
                statusCell = `<span class="badge badge-warning clickable" onclick="showScheduleActionModal('${s.id}', 'process')">Ch·ªù duy·ªát</span>`;
              } else if (s.employeeId === currentEmployeeId) {
                statusCell = `<span class="badge badge-warning clickable" onclick="confirmCancel('${s.id}')">Ch·ªù duy·ªát</span>`;
              } else {
                statusCell = `<span class="badge badge-warning">Ch·ªù duy·ªát</span>`;
              }
            } else if (s.approvalStatus === "approved") {
              statusCell = `<span class="badge badge-success">ƒê√£ duy·ªát</span>`;
            } else if (s.approvalStatus === "rejected") {
statusCell = `<span class="badge badge-danger clickable" onclick="showRejectReason('${s.rejectReason || ''}')">T·ª´ ch·ªëi</span>`;
            }

            if (s.cancelRequested) {
              statusCell += ` <span class="badge badge-cancel">Y√™u c·∫ßu h·ªßy</span>`;
            }

            return `
              <tr>
                <td>${date}</td>
                <td>${name}</td>
                <td>${typeText}</td>
                <td>${statusCell}</td>
              </tr>
            `;
          }).join("")}
        </tbody>
      </table>
    ` : "<p style='color:red;'>‚ö† Kh√¥ng c√≥ y√™u c·∫ßu l·ªãch l√†m vi·ªác n√†o</p>"}
  `;
}

function showRejectReason(reason) {
  if (!reason || reason.trim() === "") {
    alert("Kh√¥ng c√≥ l√Ω do t·ª´ ch·ªëi ƒë∆∞·ª£c ghi l·∫°i.");
  } else {
    alert("L√Ω do t·ª´ ch·ªëi: " + reason);
  }
}

function submitScheduleRequest(date, status, targetEmployeeId = null) {
  const scheduleId = `${date}_${currentEmployeeId}`;

  if (!isEmployeeDataLoaded || !globalEmployeeData || globalEmployeeData.length === 0) {
    showToastNotification('D·ªØ li·ªáu nh√¢n vi√™n ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.');
    console.warn('globalEmployeeData not ready');
    return;
  }

  const employee = globalEmployeeData.find(e => e.id === currentEmployeeId);
  if (!employee || !employee.name) {
    showToastNotification('L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n hi·ªán t·∫°i');
    console.error('Employee not found for ID:', currentEmployeeId);
    return;
  }

  const scheduleData = {
    id: scheduleId,
    employeeId: currentEmployeeId,
    employeeName: employee.name,
    date: date,
    status: status,
    approvalStatus: status === 'swap' ? 'swapPending' : 'pending',
    timestamp: Date.now(),
    ...(targetEmployeeId && { targetEmployeeId })
  };

  // ‚úÖ L∆∞u l√™n Firebase
  db.ref('schedules/' + scheduleId).set(scheduleData)
    .then(() => {
      // ‚úÖ C·∫≠p nh·∫≠t ngay globalScheduleData
      const existingIndex = globalScheduleData.findIndex(s => s.id === scheduleId);
      if (existingIndex !== -1) {
        globalScheduleData[existingIndex] = scheduleData;
      } else {
        globalScheduleData.push(scheduleData);
      }

      // ‚úÖ Render ngay danh s√°ch v√† calendar
      renderCalendar();
      renderScheduleRequests();

      // ‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o
      showToastNotification(`‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu ${getScheduleTypeText(scheduleData)} th√†nh c√¥ng`);
      closeModal('action-modal');

      // ‚úÖ G·ª≠i th√¥ng b√°o cho qu·∫£n l√Ω
      const notificationMessage = status === 'swap'
        ? `${employee.name} y√™u c·∫ßu ƒë·ªïi ca ng√†y ${date} v·ªõi ${getEmployeeName(targetEmployeeId)}`
        : `${employee.name} y√™u c·∫ßu ${status === 'off' ? 'ngh·ªâ' : 'tƒÉng ca'} ng√†y ${date}`;

      db.ref('notifications/manager').push({
        message: notificationMessage,
        timestamp: Date.now(),
        type: 'schedule_request',
        scheduleId,
        isRead: false
      });

      // ‚úÖ N·∫øu l√† ƒë·ªïi ca ‚Üí th√¥ng b√°o cho nh√¢n vi√™n ƒë∆∞·ª£c nh·∫Øm ƒë·∫øn
      if (status === 'swap' && targetEmployeeId) {
        db.ref(`notifications/${targetEmployeeId}`).push({
          message: `${employee.name} mu·ªën ƒë·ªïi ca v·ªõi b·∫°n ng√†y ${date}`,
          timestamp: Date.now(),
          type: 'swap_request',
          scheduleId,
          isRead: false
        });
      }

      console.log("‚úÖ Submitted schedule:", scheduleData);
    })
    .catch(err => {
      showToastNotification(`L·ªói khi g·ª≠i y√™u c·∫ßu: ${err.message}`);
      console.error('Firebase error:', err);
    });
}

function updateEmployeeInfo() {
  const name = document.getElementById("personal-employee-name").value.trim();
  const address = document.getElementById("employee-address").value.trim();
  const phone = document.getElementById("employee-phone").value.trim();
  const note = document.getElementById("employee-note").value.trim();

  if (!name) {
    alert("Vui l√≤ng nh·∫≠p h·ªç t√™n.");
    return;
  }

  if (!currentEmployeeId) {
    alert("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID nh√¢n vi√™n hi·ªán t·∫°i.");
    return;
  }

  db.ref(`users/${currentEmployeeId}`).update({
    name,
    address,
    phone,
    note
  })
  .then(() => {
    showToastNotification("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n.");
    // C·∫≠p nh·∫≠t l·∫°i t√™n n·∫øu c√≥ n∆°i ƒëang hi·ªÉn th·ªã t√™n c≈©
    const emp = globalEmployeeData.find(e => e.id === currentEmployeeId);
    if (emp) emp.name = name;
    renderEmployeeList?.();  // render l·∫°i danh s√°ch n·∫øu c·∫ßn
  })
  .catch(err => {
    alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t: " + err.message);
  });
}


function cancelSchedule(scheduleId) {
  const schedule = globalScheduleData.find(s => s.id === scheduleId);
  if (!schedule) {
    showToastNotification('Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!');
    return;
  }

  // N·∫øu y√™u c·∫ßu ƒëang ch·ªù duy·ªát (pending ho·∫∑c swapPending), h·ªßy tr·ª±c ti·∫øp
  if (schedule.approvalStatus === 'pending' || schedule.approvalStatus === 'swapPending') {
    if (!confirm('B·∫°n ch·∫Øc ch·∫Øn mu·ªën h·ªßy y√™u c·∫ßu n√†y?')) return;

    const updates = {};
    updates[`schedules/${scheduleId}`] = null;

    db.ref().update(updates)
      .then(() => {
        showToastNotification('ƒê√£ h·ªßy y√™u c·∫ßu th√†nh c√¥ng');
        closeModal('action-modal'); // ƒê√≥ng popup
        renderScheduleRequests(); // C·∫≠p nh·∫≠t danh s√°ch
        renderCalendar(); // C·∫≠p nh·∫≠t l·ªãch
      })
      .catch(err => showToastNotification(`L·ªói: ${err.message}`));
  }
  // N·∫øu y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c duy·ªát (approved), y√™u c·∫ßu x√°c nh·∫≠n t·ª´ qu·∫£n l√Ω
  else if (schedule.approvalStatus === 'approved') {
    if (!confirm('Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c duy·ªát. H·ªßy y√™u c·∫ßu n√†y s·∫Ω th√¥ng b√°o cho qu·∫£n l√Ω ƒë·ªÉ x√°c nh·∫≠n. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?')) return;

    const updates = {};
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh swapPending ƒë·ªÉ ch·ªù qu·∫£n l√Ω x√°c nh·∫≠n
    updates[`schedules/${scheduleId}/approvalStatus`] = 'swapPending';
    updates[`schedules/${scheduleId}/cancelRequested`] = true;
    updates[`schedules/${scheduleId}/cancelRequestedAt`] = Date.now();

    // Th√¥ng b√°o cho qu·∫£n l√Ω
    const statusText = schedule.status === 'off' ? 'ngh·ªâ' : schedule.status === 'overtime' ? 'tƒÉng ca' : 'ƒë·ªïi ca';
    updates[`notifications/manager/notif_${Date.now()}`] = {
      message: `${schedule.employeeName} y√™u c·∫ßu h·ªßy ${statusText} ƒë√£ duy·ªát ng√†y ${schedule.date}`,
      timestamp: Date.now(),
      type: 'cancel_request',
      scheduleId,
      isRead: false
    };

    db.ref().update(updates)
      .then(() => {
        showToastNotification('ƒê√£ g·ª≠i y√™u c·∫ßu h·ªßy ƒë·∫øn qu·∫£n l√Ω');
        closeModal('action-modal'); // ƒê√≥ng popup
        renderScheduleRequests(); // C·∫≠p nh·∫≠t danh s√°ch
        renderCalendar(); // C·∫≠p nh·∫≠t l·ªãch
      })
      .catch(err => showToastNotification(`L·ªói: ${err.message}`));
  }
}

function respondToSwapRequest(scheduleId, accept) {
  const schedule = globalScheduleData.find(s => s.id === scheduleId);
  if (!schedule || schedule.approvalStatus !== 'swapPending') {
    alert('Y√™u c·∫ßu ƒë·ªïi ca kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!');
    return;
  }

  const employee = globalEmployeeData.find(e => e.id === currentEmployeeId);
  const requester = globalEmployeeData.find(e => e.id === schedule.employeeId);
  if (!employee || !requester) {
    alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n!');
    return;
  }

  const updates = {};
  
  if (accept) {
    // T·∫°o l·ªãch ngh·ªâ cho nh√¢n vi√™n ƒë·ªìng √Ω ƒë·ªïi ca
    const swapScheduleId = `${schedule.date}_${currentEmployeeId}`;
    updates[`schedules/${swapScheduleId}`] = {
      id: swapScheduleId,
      employeeId: currentEmployeeId,
      employeeName: employee.name,
      date: schedule.date,
      status: 'off',
      approvalStatus: 'approved',
      timestamp: Date.now()
    };

    // Duy·ªát y√™u c·∫ßu ƒë·ªïi ca
    updates[`schedules/${scheduleId}/approvalStatus`] = 'approved';
    updates[`schedules/${scheduleId}/updatedAt`] = Date.now();
    
    // Th√¥ng b√°o cho ng∆∞·ªùi y√™u c·∫ßu
    updates[`notifications/${schedule.employeeId}/notif_${Date.now()}`] = {
      message: `${employee.name} ƒë√£ ƒë·ªìng √Ω ƒë·ªïi ca ng√†y ${schedule.date}`,
      timestamp: Date.now(),
      type: 'swap_approval',
      isRead: false
    };

    // Th√¥ng b√°o cho qu·∫£n l√Ω
    updates[`notifications/manager/notif_${Date.now()}`] = {
      message: `${employee.name} ƒë√£ ƒë·ªìng √Ω ƒë·ªïi ca ng√†y ${schedule.date} v·ªõi ${requester.name}`,
      timestamp: Date.now(),
      type: 'swap_confirmation',
      isRead: false
    };

    db.ref().update(updates)
      .then(() => {
        showToastNotification('ƒê√£ ƒë·ªìng √Ω ƒë·ªïi ca!');
        closeModal('action-modal');
      })
      .catch(err => showToastNotification(`L·ªói: ${err.message}`));
  } else {
    // T·ª´ ch·ªëi y√™u c·∫ßu
    updates[`schedules/${scheduleId}`] = null;
    
    // Th√¥ng b√°o cho ng∆∞·ªùi y√™u c·∫ßu
    updates[`notifications/${schedule.employeeId}/notif_${Date.now()}`] = {
      message: `${employee.name} ƒë√£ t·ª´ ch·ªëi ƒë·ªïi ca ng√†y ${schedule.date}`,
      timestamp: Date.now(),
      type: 'swap_rejection',
      isRead: false
    };

    // Th√¥ng b√°o cho qu·∫£n l√Ω
    updates[`notifications/manager/notif_${Date.now()}`] = {
      message: `${employee.name} ƒë√£ t·ª´ ch·ªëi ƒë·ªïi ca ng√†y ${schedule.date} v·ªõi ${requester.name}`,
      timestamp: Date.now(),
      type: 'swap_rejection',
      isRead: false
    };

    db.ref().update(updates)
      .then(() => {
        showToastNotification('ƒê√£ t·ª´ ch·ªëi ƒë·ªïi ca!');
        closeModal('action-modal');
      })
      .catch(err => showToastNotification(`L·ªói: ${err.message}`));
  }
}

// ================ NOTIFICATION FUNCTIONS ================
function renderNotifications() {
  const container = document.getElementById('notifications-container');
  if (!container) return;

  const unreadNotifications = globalNotifications
    .filter(n => !n.isRead)
    .sort((a, b) => b.timestamp - a.timestamp);

  container.innerHTML = `
    <h3>Th√¥ng b√°o m·ªõi (${unreadNotifications.length})</h3>
    ${unreadNotifications.length > 0 ? `
      <ul class="notification-list">
        ${unreadNotifications.map(n => `
          <li class="notification-item ${n.type}">
            <div class="notification-message">${n.message}</div>
            <div class="notification-time">${new Date(n.timestamp).toLocaleString('vi-VN')}</div>
            ${n.type === 'swap_request' ? `
              <div class="notification-actions">
                <button class="small-btn" onclick="respondToSwapRequest('${n.scheduleId}', true)">ƒê·ªìng √Ω</button>
                <button class="small-btn" onclick="respondToSwapRequest('${n.scheduleId}', false)">T·ª´ ch·ªëi</button>
              </div>
            ` : ''}
            <button class="mark-read-btn" onclick="markNotificationAsRead('${n.id}')">ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc</button>
          </li>
        `).join('')}
      </ul>
    ` : '<p>Kh√¥ng c√≥ th√¥ng b√°o m·ªõi</p>'}
  `;
}

function markNotificationAsRead(notificationId) {
  db.ref(`notifications/${currentEmployeeId}/${notificationId}`).update({
    isRead: true
  })
  .catch(err => console.error('L·ªói ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc:', err));
}
function isManagerView(employeeId) {
  return currentEmployee?.role === "manager" || currentEmployee?.role === "admin";
}
let currentEmployee = null;

// ================ ADVANCE FUNCTIONS ================
// Th√™m v√†o profile.js, tr∆∞·ªõc ph·∫ßn CALENDAR UI
function renderAdvanceRequests() {
  const container = document.getElementById("advance-requests-container");
  if (!container) return;

  const isManager = isCurrentUserManager();
  const expanded = container.dataset.expanded === "true";

  let requests = isManager
    ? globalAdvanceRequests
    : globalAdvanceRequests.filter(a => a.employeeId === currentEmployeeId);

  // ‚úÖ S·∫Øp x·∫øp: ∆∞u ti√™n pending tr∆∞·ªõc, c√≤n l·∫°i theo ng√†y gi·∫£m d·∫ßn
  const pendingRequests = requests
    .filter(a => a.status === "pending")
    .sort((a, b) => new Date(b.date) - new Date(a.date));

  const processedRequests = requests
    .filter(a => a.status !== "pending")
    .sort((a, b) => new Date(b.date) - new Date(a.date));

  const sortedRequests = [...pendingRequests, ...processedRequests];
  const displayRequests = expanded ? sortedRequests : sortedRequests.slice(0, 3);

  // ‚úÖ Render giao di·ªán
  container.innerHTML = `
    <div style="display:flex; justify-content:space-between; align-items:center;">
      <h3>Y√™u c·∫ßu T·∫°m ·ª©ng</h3>
      ${sortedRequests.length > 3 ? `
        <button class="small-btn" onclick="toggleAdvanceRequestList()">
          ${expanded ? "Thu g·ªçn" : "Xem th√™m"}
        </button>
      ` : ""}
    </div>
    ${displayRequests.length > 0 ? `
      <div class="schedule-requests-container">
        <table class="schedule-requests-table"> <!-- ‚úÖ D√πng class c≈© -->
          <thead>
            <tr>
              <th>Ng√†y</th>
              <th>Nh√¢n vi√™n</th>
              <th>S·ªë ti·ªÅn</th>
              <th>Tr·∫°ng th√°i</th>
            </tr>
          </thead>
          <tbody>
            ${displayRequests.map(a => {
              const date = new Date(a.date).toLocaleDateString("vi-VN");
              const name = a.employeeName || "Kh√¥ng x√°c ƒë·ªãnh";
              const amount = !isNaN(Number(a.amount))
                ? Number(a.amount).toLocaleString("vi-VN") + " VND"
                : "Kh√¥ng x√°c ƒë·ªãnh";

              let statusBadge = "";
              if (a.status === "pending") {
                if (isManager) {
                  statusBadge = `<span class="badge badge-warning clickable" onclick="showAdvanceActionModal('${a.id}', 'process')">Ch·ªù duy·ªát</span>`;
                } else if (a.employeeId === currentEmployeeId) {
                  statusBadge = `<span class="badge badge-warning clickable" onclick="confirmCancelAdvance('${a.id}')">Ch·ªù duy·ªát</span>`;
                } else {
                  statusBadge = `<span class="badge badge-warning">Ch·ªù duy·ªát</span>`;
                }
              } else if (a.status === "approved") {
                statusBadge = `<span class="badge badge-success">ƒê√£ duy·ªát</span>`;
              } else if (a.status === "denied") {
  statusBadge = `<span class="badge badge-danger clickable" onclick="showRejectReason('${a.rejectReason || ''}')">T·ª´ ch·ªëi</span>`;
}

              return `
                <tr>
                  <td>${date}</td>
                  <td>${name}</td>
                  <td>${amount}</td>
                  <td>${statusBadge}</td>
                </tr>
              `;
            }).join("")}
          </tbody>
        </table>
      </div>
    ` : "<p style='color:red;'>‚ö† Kh√¥ng c√≥ y√™u c·∫ßu t·∫°m ·ª©ng n√†o</p>"}
  `;
}
function listenSchedulesRealtime() {
  db.ref("schedules").on("value", snapshot => {
    globalScheduleData = Object.entries(snapshot.val() || {}).map(([id, data]) => ({ id, ...data }));
    
    // ‚úÖ Render l·∫°i UI khi c√≥ thay ƒë·ªïi
    if (document.getElementById("schedule-requests-container")) {
      renderScheduleRequests();
    }
    if (typeof renderCalendar === "function") {
      renderCalendar();
    }
  }, err => {
    console.error("‚ùå L·ªói khi l·∫Øng nghe schedules:", err.message);
  });
}
function listenAdvancesRealtime() {
  db.ref("advances").on("value", snapshot => {
    globalAdvanceRequests = Object.entries(snapshot.val() || {}).map(([id, data]) => ({ id, ...data }));
    
    // ‚úÖ Render l·∫°i UI khi c√≥ thay ƒë·ªïi
    if (document.getElementById("advance-requests-container")) {
      renderAdvanceRequests();
    }
  }, err => {
    console.error("‚ùå L·ªói khi l·∫Øng nghe advances:", err.message);
  });
}


function toggleAdvanceRequestList() {
  const container = document.getElementById("advance-requests-container");
  if (!container) return;
  container.dataset.expanded = container.dataset.expanded === "true" ? "false" : "true";
  renderAdvanceRequests();
}


function confirmCancelAdvance(advanceId) {
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy y√™u c·∫ßu t·∫°m ·ª©ng n√†y?")) {
    cancelAdvanceRequest(advanceId);
  }
}

function cancelAdvanceRequest(advanceId) {
  const advance = globalAdvanceRequests.find(a => a.id === advanceId);
  if (!advance) {
    showToastNotification('Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!');
    return;
  }

  if (advance.status === 'pending') {
    const updates = {};
    updates[`advances/${advanceId}`] = null;

    db.ref().update(updates)
      .then(() => {
        showToastNotification('ƒê√£ h·ªßy y√™u c·∫ßu t·∫°m ·ª©ng!');
        renderAdvanceRequests(); // c·∫≠p nh·∫≠t l·∫°i danh s√°ch
      })
      .catch(err => showToastNotification(`L·ªói: ${err.message}`));
  } else {
    showToastNotification('Kh√¥ng th·ªÉ h·ªßy y√™u c·∫ßu ƒë√£ duy·ªát ho·∫∑c b·ªã t·ª´ ch·ªëi.');
  }
}


function toggleRequestList() {
  const container = document.getElementById("schedule-requests-container");
  if (!container) return;
  container.dataset.expanded = container.dataset.expanded === "true" ? "false" : "true";
  renderScheduleRequests();
}
// S·ª≠a h√†m showScheduleActionModal
function showScheduleActionModal(scheduleId, action) {
  const modal = document.getElementById("action-modal");
  const content = document.getElementById("action-modal-content");
  if (!modal || !content) return;

  const schedule = globalScheduleData.find(s => s.id === scheduleId);
  if (!schedule) {
    showToastNotification("Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!");
    return;
  }

  let contentHTML = `<h3>X·ª≠ l√Ω y√™u c·∫ßu l·ªãch</h3>`;
  if (action === "process") {
    contentHTML += `
      <p>Y√™u c·∫ßu ${getScheduleTypeText(schedule)} ng√†y ${new Date(schedule.date).toLocaleDateString('vi-VN')} c·ªßa ${schedule.employeeName}</p>
      <div class="button-group">
        <button class="primary-btn" onclick="approveSchedule('${scheduleId}')">Ph√™ duy·ªát</button>
        <button class="secondary-btn" onclick="rejectSchedule('${scheduleId}')">T·ª´ ch·ªëi</button>
        <button class="secondary-btn" onclick="closeModal('action-modal')">H·ªßy</button>
      </div>
    `;
  } else if (action === "cancel") {
    contentHTML += `
      <p>Y√™u c·∫ßu h·ªßy ${getScheduleTypeText(schedule)} ng√†y ${new Date(schedule.date).toLocaleDateString('vi-VN')} c·ªßa ${schedule.employeeName}</p>
      <div class="button-group">
        <button class="primary-btn" onclick="approveCancelSchedule('${scheduleId}')">ƒê·ªìng √Ω</button>
        <button class="secondary-btn" onclick="rejectCancelSchedule('${scheduleId}')">Kh√¥ng ƒë·ªìng √Ω</button>
        <button class="secondary-btn" onclick="closeModal('action-modal')">H·ªßy</button>
      </div>
    `;
  }

  content.innerHTML = contentHTML;
  modal.style.display = "block";
}
// Th√™m h√†m showAdvanceActionModal
function showAdvanceActionModal(advanceId, action) {
  const modal = document.getElementById("action-modal");
  const content = document.getElementById("action-modal-content");
  if (!modal || !content) return;

  const advance = globalAdvanceRequests.find(a => a.id === advanceId);
  if (!advance) {
    showToastNotification("Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!");
    return;
  }

  content.innerHTML = `
    <h3>X·ª≠ l√Ω y√™u c·∫ßu t·∫°m ·ª©ng</h3>
    <p>Y√™u c·∫ßu t·∫°m ·ª©ng ${advance.amount.toLocaleString("vi-VN")} VND ng√†y ${advance.date} c·ªßa ${advance.employeeName}</p>
    <div class="button-group">
      <button class="primary-btn" onclick="approveAdvance('${advanceId}')">Ph√™ duy·ªát</button>
      <button class="secondary-btn" onclick="rejectAdvance('${advanceId}')">T·ª´ ch·ªëi</button>
      <button class="secondary-btn" onclick="closeModal('action-modal')">H·ªßy</button>
    </div>
  `;
  modal.style.display = "block";
}

// H√†m h·ªó tr·ª£ ƒë·ªÉ l·∫•y l·ªõp CSS cho tr·∫°ng th√°i l·ªãch
function getScheduleStatusClass(schedule) {
  switch (schedule.approvalStatus) {
    case "pending":
    case "swapPending":
      return "status-pending";
    case "approved":
      return "status-approved";
    case "rejected":
      return "status-rejected";
    default:
      return "";
  }
}
function approveAdvance(advanceId) {
  if (!isCurrentUserManager()) {
    showToastNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn ph√™ duy·ªát!');
    return;
  }
  const advance = globalAdvanceRequests.find(a => a.id === advanceId);
  if (!advance) {
    showToastNotification('Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!');
    return;
  }
  db.ref(`advances/${advanceId}`).update({
    status: 'approved',
    resolvedAt: Date.now(),
    resolvedBy: currentEmployeeId
  })
    .then(() => {
      db.ref(`notifications/${advance.employeeId}`).push({
        message: `Y√™u c·∫ßu t·∫°m ·ª©ng ${advance.amount.toLocaleString('vi-VN')} VND ng√†y ${advance.date} ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát`,
        timestamp: Date.now(),
        type: 'advance_approval',
        isRead: false
      });
      showToastNotification('ƒê√£ ph√™ duy·ªát y√™u c·∫ßu t·∫°m ·ª©ng!');
      closeModal('action-modal'); 
      renderAdvanceRequests(); // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch m·ªõi
    })
    .catch(err => {
      showToastNotification(`L·ªói: ${err.message}`);
      console.error('‚ùå Error approving advance:', err);
    });
}

function rejectAdvance(advanceId) {
  if (!isCurrentUserManager()) {
    showToastNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi!');
    return;
  }
  const advance = globalAdvanceRequests.find(a => a.id === advanceId);
  if (!advance) {
    showToastNotification('Y√™u c·∫ßu kh√¥ng t·ªìn t·∫°i!');
    return;
  }
  const reason = prompt('L√Ω do t·ª´ ch·ªëi:');
  if (!reason) return;
  db.ref(`advances/${advanceId}`).update({
    status: 'denied',
    rejectReason: reason,
    resolvedAt: Date.now(),
    resolvedBy: currentEmployeeId
  })
    .then(() => {
      db.ref(`notifications/${advance.employeeId}`).push({
        message: `Y√™u c·∫ßu t·∫°m ·ª©ng ${advance.amount.toLocaleString('vi-VN')} VND ng√†y ${advance.date} b·ªã t·ª´ ch·ªëi: ${reason}`,
        timestamp: Date.now(),
        type: 'advance_rejection',
        isRead: false
      });
      showToastNotification('ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu t·∫°m ·ª©ng!');
      closeModal('action-modal');
      renderAdvanceRequests(); // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch m·ªõi
    })
    .catch(err => {
      showToastNotification(`L·ªói: ${err.message}`);
      console.error('‚ùå Error rejecting advance:', err);
    });
}


function requestAdvance() {
  const amount = document.getElementById('advance-amount').value;
  const reason = document.getElementById('advance-reason').value;
  
  if (!amount || !reason) {
    alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß s·ªë ti·ªÅn v√† l√Ω do!');
    return;
  }

  const employee = globalEmployeeData.find(e => e.id === currentEmployeeId);
  const requestId = Date.now().toString();
  const advanceData = {
    id: requestId,
    employeeId: currentEmployeeId,
    employeeName: employee.name,
    amount: parseFloat(amount),
    reason,
    status: 'pending',
    timestamp: Date.now(),
    date: new Date().toISOString().split('T')[0]
  };

  db.ref('advances/' + requestId).set(advanceData)
    .then(() => {
      // Th√¥ng b√°o cho qu·∫£n l√Ω
      db.ref('notifications/manager').push({
        message: `${employee.name} y√™u c·∫ßu t·∫°m ·ª©ng ${amount} VND: ${reason}`,
        timestamp: Date.now(),
        type: 'advance_request',
        advanceId: requestId,
        isRead: false
      });

      // Th√¥ng b√°o cho nh√¢n vi√™n
      db.ref(`notifications/${currentEmployeeId}`).push({
        message: `B·∫°n ƒë√£ g·ª≠i y√™u c·∫ßu t·∫°m ·ª©ng ${amount} VND`,
        timestamp: Date.now(),
        type: 'advance_confirmation',
        isRead: false
      });

      showToastNotification('ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°m ·ª©ng!');
      document.getElementById('advance-amount').value = '';
      document.getElementById('advance-reason').value = '';
    })
    .catch(err => showToastNotification(`L·ªói: ${err.message}`));
}

// ================ WORK SUMMARY FUNCTIONS ================
function renderOffAndOvertime() {
  const container = document.getElementById('off-and-overtime');
  if (!container) return;

  const offDays = globalScheduleData.filter(s => 
    s.employeeId === currentEmployeeId && 
    s.status === 'off' && 
    s.approvalStatus === 'approved' &&
    s.date.startsWith(`${currentYear}-${String(currentMonth).padStart(2, '0')}`)
  ).map(s => new Date(s.date).toLocaleDateString('vi-VN'));
  
  const overtimeDays = globalScheduleData.filter(s => 
    s.employeeId === currentEmployeeId && 
    s.status === 'overtime' && 
    s.approvalStatus === 'approved' &&
    s.date.startsWith(`${currentYear}-${String(currentMonth).padStart(2, '0')}`)
  ).map(s => new Date(s.date).toLocaleDateString('vi-VN'));
  
  const swapDays = globalScheduleData.filter(s => 
    s.employeeId === currentEmployeeId && 
    s.status === 'swap' && 
    s.approvalStatus === 'approved' &&
    s.date.startsWith(`${currentYear}-${String(currentMonth).padStart(2, '0')}`)
  ).map(s => new Date(s.date).toLocaleDateString('vi-VN'));

  container.innerHTML = `
    <h3>Th·ªëng k√™ th√°ng ${currentMonth}/${currentYear}</h3>
    <p><strong>Ng√†y ngh·ªâ:</strong> ${offDays.length > 0 ? offDays.join(', ') : 'Kh√¥ng c√≥'}</p>
    <p><strong>Ng√†y tƒÉng ca:</strong> ${overtimeDays.length > 0 ? overtimeDays.join(', ') : 'Kh√¥ng c√≥'}</p>
    <p><strong>Ng√†y ƒë·ªïi ca:</strong> ${swapDays.length > 0 ? swapDays.join(', ') : 'Kh√¥ng c√≥'}</p>
  `;
}

function renderSalarySummary() {
  const salaryDiv = document.getElementById("salary-summary");
  if (!salaryDiv) return;

  const userId = currentEmployeeId;
  const schedule = globalScheduleData.filter(s => s.employeeId === userId);

  const now = new Date();
  const year = now.getFullYear();
  const month = now.getMonth();

  const currentMonthSchedules = schedule.filter(s => {
    const d = new Date(s.date);
    return d.getFullYear() === year && d.getMonth() === month;
  });

  const offDays = currentMonthSchedules.filter(s => s.status === 'off').length;
  const otDays = currentMonthSchedules.filter(s => s.status === 'overtime').length;

  let summaryText = '';
  if (offDays === 0 && otDays === 0) {
    summaryText = 'Full th√°ng';
  } else {
    summaryText = `L∆∞∆°ng: ${offDays > 0 ? `-${offDays}` : ''} ${otDays > 0 ? `+${otDays}` : ''}`.trim();
  }

  // T√≠nh ng√†y c√≤n l·∫°i trong th√°ng (ƒë∆∞·ª£c l√†m)
  const lastDay = new Date(year, month + 1, 0);
  const today = new Date();

  const futureWorkDays = schedule.filter(s => {
    const d = new Date(s.date);
    return s.employeeId === userId && s.status === 'working' && d >= today && d <= lastDay;
  }).length;

  salaryDiv.innerHTML = `
    <p>${summaryText}</p>
    <p>Ng√†y c√≤n l·∫°i trong th√°ng (d·ª± ki·∫øn c√≥ l∆∞∆°ng): <strong>${futureWorkDays}</strong></p>
  `;
}

function calculateFutureSalary() {
  const wagePerHour = parseFloat(document.getElementById("wage-per-hour").value) || 0;
  const hoursPerDay = parseFloat(document.getElementById("hours-per-day").value) || 0;

  if (wagePerHour <= 0 || hoursPerDay <= 0) {
    alert("Vui l√≤ng nh·∫≠p ƒë√∫ng ti·ªÅn/gi·ªù v√† gi·ªù/ng√†y.");
    return;
  }

  const now = new Date();
  const year = now.getFullYear();
  const month = now.getMonth(); // t·ª´ 0‚Äì11
  const lastDayOfMonth = new Date(year, month + 1, 0);
  const totalDaysInMonth = lastDayOfMonth.getDate(); // 30 ho·∫∑c 31

  // L·ªçc l·ªãch c·ªßa ng∆∞·ªùi d√πng trong th√°ng hi·ªán t·∫°i
  const schedule = globalScheduleData.filter(s => {
    const d = new Date(s.date);
    return s.employeeId === currentEmployeeId &&
           d.getFullYear() === year &&
           d.getMonth() === month;
  });

  const offDays = schedule.filter(s => s.status === 'off').length;
  const otDays = schedule.filter(s => s.status === 'overtime').length;

  const realWorkingDays = totalDaysInMonth - offDays + otDays;
  const estimate = realWorkingDays * hoursPerDay * wagePerHour;

  document.getElementById("future-salary-result").innerHTML = `
    <p>Th√°ng n√†y c√≥ <strong>${totalDaysInMonth}</strong> ng√†y</p>
    <p>ƒê√£ ngh·ªâ: <strong>${offDays}</strong> ng√†y</p>
    <p>ƒê√£ tƒÉng ca: <strong>${otDays}</strong> ng√†y</p>
    <p>‚û°Ô∏è T·ªïng ng√†y c√¥ng t√≠nh l∆∞∆°ng: <strong>${realWorkingDays}</strong></p>
    <p>üí∞ L∆∞∆°ng t·∫°m t√≠nh: <strong>${estimate.toLocaleString('vi-VN')} VND</strong></p>
  `;
}

// ================ HELPER FUNCTIONS ================
function getEmployeeName(employeeId) {
  const employee = globalEmployeeData.find(e => e.id === employeeId);
  
  return employee ? employee.name : "Kh√¥ng r√µ";
}

function closeModal(modalId) {
  document.getElementById(modalId).style.display = "none";
}

function getScheduleTypeText(schedule) {
  switch(schedule.status) {
    case 'off': return 'Ngh·ªâ l√†m';
    case 'overtime': return 'TƒÉng ca';
    case 'swap': return `ƒê·ªïi ca v·ªõi ${getEmployeeName(schedule.targetEmployeeId)}`;
    default: return 'Kh√¥ng x√°c ƒë·ªãnh';
  }
}

function getScheduleStatusText(schedule) {
  switch(schedule.approvalStatus) {
    case 'pending': return 'Ch·ªù duy·ªát';
    case 'swapPending': return 'Ch·ªù ph·∫£n h·ªìi';
    case 'approved': return 'ƒê√£ duy·ªát';
    case 'rejected': return `T·ª´ ch·ªëi: ${schedule.rejectReason || ''}`;
    default: return 'Kh√¥ng x√°c ƒë·ªãnh';
  }
}

function getAdvanceStatusText(advance) {
  switch(advance.status) {
    case 'pending': return 'Ch·ªù duy·ªát';
    case 'approved': return 'ƒê√£ duy·ªát';
    case 'denied': return `T·ª´ ch·ªëi: ${advance.rejectReason || ''}`;
    default: return 'Kh√¥ng x√°c ƒë·ªãnh';
  }
}

function getAdvanceStatusClass(advance) {
  switch(advance.status) {
    case 'pending': return 'status-pending';
    case 'approved': return 'status-approved';
    case 'denied': return 'status-rejected';
    default: return '';
  }
}

function showToastNotification(message) {
  const container = document.getElementById("toast-container");
  const toast = document.createElement("div");
  toast.className = "toast";
  toast.textContent = message;
  container.appendChild(toast);
  setTimeout(() => toast.classList.add("show"), 100);
  setTimeout(() => {
    toast.classList.remove("show");
    setTimeout(() => container.removeChild(toast), 500);
  }, 5000);
}

document.addEventListener('DOMContentLoaded', () => {
  if (document.getElementById('profile-page')) {
    initProfile();
  }
});



//
const scheduleStatusColors = {
  off: "#f44336",       // ƒë·ªè
  overtime: "#2196F3",  // xanh d∆∞∆°ng
  swap: "#FF9800"       // cam
};

function isCurrentUserManager() {
  console.log("Checking manager role for:", currentEmployeeId, globalEmployeeData);
  const user = globalEmployeeData.find(e => e.id === currentEmployeeId);
  return user && user.role === 'manager';
}

// ================ INITIALIZATION ================


function setupRealtimeListeners() {
  const isManager = isCurrentUserManager();
  const scheduleQuery = isManager
    ? db.ref("schedules")
    : db.ref("schedules").orderByChild("employeeId").equalTo(currentEmployeeId);

  scheduleQuery.on("value", (snapshot) => {
    globalScheduleData = snapshot.val()
      ? Object.keys(snapshot.val()).map(key => ({ id: key, ...snapshot.val()[key] }))
      : [];
    console.log("Updated globalScheduleData:", globalScheduleData); // Debug
    if (document.getElementById("calendar")) renderCalendar();
    if (document.getElementById("schedule-status-list")) renderScheduleRequests();
    if (document.getElementById("off-and-overtime")) renderOffAndOvertime();
    if (document.getElementById("salary-summary")) renderSalarySummary();
    if (document.getElementById("schedule-requests-container")) renderScheduleRequests(); // Th√™m d√≤ng n√†y
  });

  const advanceQuery = isManager
    ? db.ref("advances")
    : db.ref("advances").orderByChild("employeeId").equalTo(currentEmployeeId);

  advanceQuery.on("value", (snapshot) => {
    globalAdvanceRequests = snapshot.val() ? Object.values(snapshot.val()) : [];
    console.log("Updated globalAdvanceRequests:", globalAdvanceRequests); // Debug
    if (document.getElementById("advance-history-container")) renderAdvanceRequests();
  });

  db.ref(`notifications/${currentEmployeeId}`).on("value", (snapshot) => {
    globalNotifications = snapshot.val() ? Object.values(snapshot.val()) : [];
    if (document.getElementById("notifications-container")) renderNotifications();
  });
}
// ================ CALENDAR UI ================

function changeMonth(offset) {
  currentMonth += offset;
  if (currentMonth < 1) {
    currentMonth = 12;
    currentYear--;
  } else if (currentMonth > 12) {
    currentMonth = 1;
    currentYear++;
  }
  renderCalendar();
}
//////-----///////


// ======================= H√ÄM H·ªñ TR·ª¢ ===========================
function safeNumber(value, defaultValue = 0) {
  return isNaN(Number(value)) ? defaultValue : Number(value);
}

function calculateSalary(days, hours, wage, bonuses, penalties) {
  const baseSalary = safeNumber(days) * safeNumber(hours) * safeNumber(wage);
  const totalBonus = bonuses.reduce((sum, b) => sum + safeNumber(b.amount), 0);
  const totalPenalty = penalties.reduce((sum, p) => sum + safeNumber(p.amount), 0);
  return {
    baseSalary,
    totalBonus,
    totalPenalty,
    finalSalary: baseSalary + totalBonus - totalPenalty
  };
}

// ======================= POPUP HI·ªÇN TH·ªä ===========================
function showPayrollModal(employeeId, month, year) {
  month = safeNumber(month, new Date().getMonth() + 1);
  year = safeNumber(year, new Date().getFullYear());

  const modal = document.getElementById("action-modal");
  const content = document.getElementById("action-modal-content");
  if (!modal || !content) return;

  const employee = globalEmployeeData.find(e => e.id === employeeId);
  if (!currentEmployee && auth.currentUser) {
    currentEmployee = globalEmployeeData.find(e => e.id === auth.currentUser.uid);
  }

  if (!employee) return;

  const payrollKey = `${employeeId}_${month}_${year}`;
  const payrollData = globalPayrollData?.[payrollKey] || {};

  const totalDaysInMonth = new Date(year, month, 0).getDate();
  const approvedOffDays = safeNumber(getApprovedOffDays(employeeId, month, year), 0);
  const approvedOvertimeDays = safeNumber(getApprovedOvertimeDays(employeeId, month, year), 0);
  const actualWorkingDays = safeNumber(payrollData.actualWorkingDays || (totalDaysInMonth - approvedOffDays + approvedOvertimeDays), totalDaysInMonth);

  const hoursPerDay = safeNumber(payrollData.hoursPerDay || employee.defaultHoursPerDay || 8);
  const wagePerHour = safeNumber(payrollData.wagePerHour || employee.defaultWagePerHour || 20000);

  const bonuses = payrollData.bonuses || [];
  const penalties = payrollData.penalties || [];

  const salaryCalc = calculateSalary(actualWorkingDays, hoursPerDay, wagePerHour, bonuses, penalties);

  const isManager = currentEmployee?.role === 'manager' || currentEmployee?.role === 'admin';
  const isSelf = employeeId === currentEmployee?.id;
  const isManagerView = isManager && !isSelf;

  const managerEditSection = isManagerView ? `
    <div class="edit-row" style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
      <label style="width: 120px;">Ng√†y c√¥ng:</label>
      <input type="number" id="edit-actual-days" value="${actualWorkingDays}" min="0" max="${totalDaysInMonth}" oninput="recalculateSalary()" style="border: 1px solid #ccc; padding: 4px 6px; width: 100px;" />
    </div>
    <div class="edit-row" style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
      <label style="width: 120px;">Gi·ªù c√¥ng/ng√†y:</label>
      <input type="number" id="edit-hours-day" value="${hoursPerDay}" min="1" oninput="recalculateSalary()" style="border: 1px solid #ccc; padding: 4px 6px; width: 100px;" />
    </div>
    <div class="edit-row" style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
      <label style="width: 120px;">Ti·ªÅn c√¥ng/gi·ªù:</label>
      <input type="number" id="edit-wage-hour" value="${wagePerHour}" min="0" oninput="recalculateSalary()" style="border: 1px solid #ccc; padding: 4px 6px; width: 100px;" />
    </div>` : '';

  content.innerHTML = `
    <div style="display: flex; justify-content: space-between; gap: 20px; flex-wrap: wrap;">
      <p style="margin: 0;"><strong>H·ªç t√™n:</strong> ${employee.name}</p>
      <p style="margin: 0;"><strong>Th√°ng:</strong> ${month}/${year}</p>
    </div>
    <button onclick="showEditPersonalPopup('${employeeId}')" style="margin: 10px 0; padding: 6px 12px; border: 1px solid #ccc; background: #eee; cursor: pointer;">‚úèÔ∏è S·ª≠a th√¥ng tin c√° nh√¢n</button>
    <hr>
    ${managerEditSection}
    <hr>
    <p>T·ªïng ng√†y trong th√°ng: <strong>${totalDaysInMonth}</strong></p>
    <p>Ng√†y ngh·ªâ ƒë√£ duy·ªát: <strong>${approvedOffDays}</strong></p>
    <p>Ng√†y tƒÉng ca ƒë√£ duy·ªát: <strong>${approvedOvertimeDays}</strong></p>
    <p>‚úÖ Ng√†y c√¥ng th·ª±c t·∫ø: <strong id="display-actual-days">${actualWorkingDays}</strong></p>
    <hr>
    <p>üïí Gi·ªù c√¥ng/ng√†y: <strong id="display-hours-day">${hoursPerDay}</strong></p>
    <p>üíµ Ti·ªÅn c√¥ng/gi·ªù: <strong id="display-wage-hour">${wagePerHour.toLocaleString('vi-VN')}</strong></p>
    <div class="bonus-detail">
      <ul>${bonuses.map(b => `<li>${b.note}: ${b.amount.toLocaleString('vi-VN')} VND</li>`).join('') || '<li>Kh√¥ng c√≥</li>'}</ul>
      <p><strong>C·ªông:</strong> <span id="display-bonus">${salaryCalc.totalBonus.toLocaleString('vi-VN')}</span> VND</p>
    </div>
    <div class="penalty-detail">
      <ul>${penalties.map(p => `<li>${p.note}: ${p.amount.toLocaleString('vi-VN')} VND</li>`).join('') || '<li>Kh√¥ng c√≥</li>'}</ul>
      <p><strong>Tr·ª´:</strong> <span id="display-penalty">${salaryCalc.totalPenalty.toLocaleString('vi-VN')}</span> VND</p>
    </div>
    <p><strong>üí∞ L∆∞∆°ng th·ª±c l√£nh:</strong> <span id="display-salary">${salaryCalc.finalSalary.toLocaleString('vi-VN')} VND</span></p>
    <button class="secondary-btn" onclick="closePayrollModal()" style="padding: 6px 12px; background: #ccc; color: black; border: none; border-radius: 4px; cursor: pointer;">ƒê√≥ng</button>
  `;

  modal.style.display = "block";
  modal.dataset.employeeId = employeeId;
  modal.dataset.month = month;
  modal.dataset.year = year;
  modal.dataset.payrollKey = payrollKey;
  modal.bonuses = [...bonuses];
  modal.penalties = [...penalties];
}

// ======================= POPUP TH√îNG TIN C√Å NH√ÇN ===========================
function showEditPersonalPopup(employeeId) {
  const employee = globalEmployeeData.find(e => e.id === employeeId);
  if (!employee) return;

  const modal = document.getElementById("action-modal");
  const content = document.getElementById("action-modal-content");
  if (!modal || !content) return;

  content.innerHTML = `
    <h3>üîß C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n</h3>
    <input id="name-input" type="text" placeholder="Nh·∫≠p t√™n" />
        <input id="phone-input" type="text" placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
        <input id="address-input" type="text" placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ" />
        <button onclick="updateUserProfile()">C·∫≠p nh·∫≠t</button>
    <button onclick="showPayrollModal('${employeeId}')" style="margin-left: 10px;">‚Ü©Ô∏è Quay l·∫°i</button>
  `;
  modal.style.display = "block";
}

// ======================= GHI ƒê√à TH√îNG TIN C√Å NH√ÇN ===========================
function submitPersonalInfo(employeeId) {
  const name = document.getElementById("name-input")?.value.trim();
  const phone = document.getElementById("phone-input")?.value.trim();
  const address = document.getElementById("address-input")?.value.trim();

  if (!name || !phone || !address) {
    showToastNotification("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
    return;
  }

  const updatedData = {
    name,
    sdt: phone,
    phone,
    address
  };

  db.ref(`users/${employeeId}`).update(updatedData)
    .then(() => {
      showToastNotification("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n!");
      loadFirebaseData(() => showEditPersonalPopup(employeeId));
    })
    .catch((err) => {
      console.error("‚ùå L·ªói khi ghi ƒë√® th√¥ng tin:", err);
      showToastNotification("‚ùå L·ªói khi l∆∞u th√¥ng tin c√° nh√¢n!");
    });
}

// ======================= X·ª¨ L√ù TH√äM/X√ìA D√íNG ===========================
function addBonusRow() {
  const modal = document.getElementById("action-modal");
  modal.bonuses.push({ note: "", amount: 0 });
  
  const bonusList = document.getElementById("bonus-list");
  const index = modal.bonuses.length - 1;
  const row = document.createElement("div");
  row.className = "edit-row";
  row.innerHTML = `
    <input type="text" placeholder="N·ªôi dung" oninput="updateRow('bonus', ${index}, 'note', this.value)" />
    <input type="number" placeholder="S·ªë ti·ªÅn" oninput="updateRow('bonus', ${index}, 'amount', this.value)" />
    <button onclick="removeRow('bonus', ${index})">‚ùå</button>
  `;
  bonusList.appendChild(row);
}

function addPenaltyRow() {
  const modal = document.getElementById("action-modal");
  modal.penalties.push({ note: "", amount: 0 });

  const penaltyList = document.getElementById("penalty-list");
  const index = modal.penalties.length - 1;
  const row = document.createElement("div");
  row.className = "edit-row";
  row.innerHTML = `
    <input type="text" placeholder="N·ªôi dung" oninput="updateRow('penalty', ${index}, 'note', this.value)" />
    <input type="number" placeholder="S·ªë ti·ªÅn" oninput="updateRow('penalty', ${index}, 'amount', this.value)" />
    <button onclick="removeRow('penalty', ${index})">‚ùå</button>
  `;
  penaltyList.appendChild(row);
}

function removeRow(type, index) {
  const modal = document.getElementById("action-modal");

  if (type === 'bonus') {
    modal.bonuses.splice(index, 1);
    document.getElementById("bonus-list").children[index].remove();
  } else {
    modal.penalties.splice(index, 1);
    document.getElementById("penalty-list").children[index].remove();
  }

  recalculateSalary();
}

function updateRow(type, index, field, value) {
  const modal = document.getElementById("action-modal");
  if (type === 'bonus') modal.bonuses[index][field] = field === 'amount' ? safeNumber(value) : value;
  if (type === 'penalty') modal.penalties[index][field] = field === 'amount' ? safeNumber(value) : value;
  recalculateSalary();
}

// ======================= T√çNH TO√ÅN REALTIME ===========================
function recalculateSalary() {
  const modal = document.getElementById("action-modal");
  const actualDays = safeNumber(document.getElementById("edit-actual-days").value);
  const hoursDay = safeNumber(document.getElementById("edit-hours-day").value);
  const wageHour = safeNumber(document.getElementById("edit-wage-hour").value);
  const bonuses = modal.bonuses;
  const penalties = modal.penalties;

  const salaryCalc = calculateSalary(actualDays, hoursDay, wageHour, bonuses, penalties);

  document.getElementById("display-actual-days").innerText = actualDays;
  document.getElementById("display-hours-day").innerText = hoursDay;
  document.getElementById("display-wage-hour").innerText = wageHour.toLocaleString('vi-VN');
  document.getElementById("display-bonus").innerText = salaryCalc.totalBonus.toLocaleString('vi-VN');
  document.getElementById("display-penalty").innerText = salaryCalc.totalPenalty.toLocaleString('vi-VN');
  document.getElementById("display-salary").innerText = salaryCalc.finalSalary.toLocaleString('vi-VN') + " VND";
}

// ======================= L∆ØU L√äN FIREBASE ===========================
function saveFullPayroll(payrollKey, month, year, employeeId) {
  const modal = document.getElementById("action-modal");
  const actualDays = safeNumber(document.getElementById("edit-actual-days").value);
  const hoursDay = safeNumber(document.getElementById("edit-hours-day").value);
  const wageHour = safeNumber(document.getElementById("edit-wage-hour").value);
  const bonuses = modal.bonuses;
  const penalties = modal.penalties;

  const salaryCalc = calculateSalary(actualDays, hoursDay, wageHour, bonuses, penalties);

  const payrollData = {
    employeeId,
    month,
    year,
    actualWorkingDays: actualDays,
    hoursPerDay: hoursDay,
    wagePerHour: wageHour,
    bonuses,
    penalties,
    bonusTotal: salaryCalc.totalBonus,
    penaltyTotal: salaryCalc.totalPenalty,
    totalSalary: salaryCalc.finalSalary,
    updatedAt: Date.now()
  };

  db.ref(`payroll/${payrollKey}`).set(payrollData)
    .then(() => {
      showToastNotification("‚úÖ ƒê√£ l∆∞u b·∫£ng l∆∞∆°ng!");
      closePayrollModal();
    })
    .catch(err => showToastNotification(`L·ªói khi l∆∞u b·∫£ng l∆∞∆°ng: ${err.message}`));
}

function closePayrollModal() {
  document.getElementById("action-modal").style.display = "none";
}
// H√†m l·∫•y ng√†y ngh·ªâ ƒë√£ duy·ªát
function getApprovedOffDays(employeeId, month, year) {
  return globalScheduleData.filter(s => 
    s.employeeId === employeeId &&
    s.approvalStatus === "approved" &&
    s.status === "off" &&
    new Date(s.date).getMonth() + 1 === month &&
    new Date(s.date).getFullYear() === year
  ).length;
}

// H√†m l·∫•y ng√†y tƒÉng ca ƒë√£ duy·ªát
function getApprovedOvertimeDays(employeeId, month, year) {
  return globalScheduleData.filter(s => 
    s.employeeId === employeeId &&
    s.approvalStatus === "approved" &&
    s.status === "overtime" &&
    new Date(s.date).getMonth() + 1 === month &&
    new Date(s.date).getFullYear() === year
  ).length;
}
